/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Whether or not the tileset is shown.
 */
export type Boolean = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The boolean value.
 */
export type Boolean1 = boolean;
/**
 * The boolean specified as a reference to another property.
 */
export type Reference = string;
/**
 * A boolean value.
 */
export type Boolean2 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS).
 */
export type Uri = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The URI value.
 */
export type Uri1 = string;
/**
 * The URI specified as a reference to another property.
 */
export type Reference1 = string;
/**
 * A URI value. The URI can optionally vary with time.
 */
export type Uri2 = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The maximum screen space error used to drive level of detail refinement.
 */
export type Double = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The number.
 */
export type Double1 = number | unknown[];
/**
 * The number specified as a reference to another property.
 */
export type Reference2 = string;
/**
 * A floating-point number.
 */
export type Double2 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );

/**
 * A 3D Tiles tileset.
 */
export interface Tileset {
  show?: Boolean;
  uri?: Uri;
  maximumScreenSpaceError?: Double;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be deleted.
 */
export interface DeletableProperty {
  /**
   * Whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
   */
  delete?: boolean;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a boolean.
 */
export interface BooleanValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a reference to another property.
 */
export interface ReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a URI.
 */
export interface UriValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
 */
export interface InterpolatableProperty {
  /**
   * The epoch to use for times specified as seconds since an epoch.
   */
  epoch?: string;
  /**
   * The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".
   */
  interpolationAlgorithm?: string;
  /**
   * The degree of interpolation to use when interpolating.
   */
  interpolationDegree?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  forwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  forwardExtrapolationDuration?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  backwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  backwardExtrapolationDuration?: number;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a floating-point number.
 */
export interface DoubleValueProperty {
  [k: string]: unknown;
}
