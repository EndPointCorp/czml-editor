/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Whether or not the label is shown.
 */
export type Boolean = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The boolean value.
 */
export type Boolean1 = boolean;
/**
 * The boolean specified as a reference to another property.
 */
export type Reference = string;
/**
 * A boolean value.
 */
export type Boolean2 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The text displayed by the label. The newline character (\n) indicates line breaks.
 */
export type String = DeletableProperty &
  StringValueProperty &
  ReferenceValueProperty & {
    string?: String1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | String2[]
    | {
        string?: String1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The string value.
 */
export type String1 = string;
/**
 * The string specified as a reference to another property.
 */
export type Reference1 = string;
/**
 * A string value. The string can optionally vary with time.
 */
export type String2 = DeletableProperty &
  StringValueProperty &
  ReferenceValueProperty & {
    string?: String1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | String2[]
    | {
        string?: String1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The font to use for the label.
 */
export type Font = DeletableProperty &
  FontValueProperty &
  ReferenceValueProperty & {
    font?: Font1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Font2[]
    | {
        font?: Font1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The font, specified using the same syntax as the CSS "font" property.
 */
export type Font1 = string;
/**
 * The font specified as a reference to another property.
 */
export type Reference2 = string;
/**
 * A font used to draw text. Fonts are specified using the same syntax as the CSS "font" property.
 */
export type Font2 = DeletableProperty &
  FontValueProperty &
  ReferenceValueProperty & {
    font?: Font1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Font2[]
    | {
        font?: Font1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The style of the label.
 */
export type LabelStyle = DeletableProperty &
  LabelStyleValueProperty &
  ReferenceValueProperty & {
    labelStyle?: LabelStyle1;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | LabelStyle2[]
    | {
        labelStyle?: LabelStyle1;
        reference?: Reference3;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The label style.
 */
export type LabelStyle1 = ("FILL" | "OUTLINE" | "FILL_AND_OUTLINE") & string;
/**
 * The label style specified as a reference to another property.
 */
export type Reference3 = string;
/**
 * The style of a label.
 */
export type LabelStyle2 = DeletableProperty &
  LabelStyleValueProperty &
  ReferenceValueProperty & {
    labelStyle?: LabelStyle1;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | LabelStyle2[]
    | {
        labelStyle?: LabelStyle1;
        reference?: Reference3;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The scale of the label. The scale is multiplied with the pixel size of the label's text. For example, if the scale is 2.0, the label will be rendered with twice the number of pixels, in each direction, of the text.
 */
export type Double = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The number.
 */
export type Double1 = number | unknown[];
/**
 * The number specified as a reference to another property.
 */
export type Reference4 = string;
/**
 * A floating-point number.
 */
export type Double2 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | number
  );
/**
 * Whether or not a background behind the label is shown.
 */
export type Boolean3 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The color of the background behind the label.
 */
export type Color = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.
 */
export type Rgba = unknown[];
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.
 */
export type Rgbaf = unknown[];
/**
 * The color specified as a reference to another property.
 */
export type Reference5 = string;
/**
 * A color. The color can optionally vary over time.
 */
export type Color1 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The amount of padding between the text and the label's background.
 */
export type BackgroundPadding = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian2;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | BackgroundPadding1[]
    | {
        cartesian2?: Cartesian2;
        reference?: Reference6;
        [k: string]: unknown;
      }
  );
/**
 * The background padding specified as a two-dimensional Cartesian value `[X, Y]`, in pixels, where X is the horizontal padding, and Y is the vertical padding.
 */
export type Cartesian2 = unknown[];
/**
 * The background padding specified as a reference to another property.
 */
export type Reference6 = string;
/**
 * The amount of horizontal and vertical padding, in pixels, between a label's text and its background.
 */
export type BackgroundPadding1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian2;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | BackgroundPadding1[]
    | {
        cartesian2?: Cartesian2;
        reference?: Reference6;
        [k: string]: unknown;
      }
  );
/**
 * The offset, in viewport pixels, of the label origin from the `position`. A pixel offset is the number of pixels up and to the right to place the label, relative to the `position`.
 */
export type PixelOffset = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian21;
    reference?: Reference7;
    [k: string]: unknown;
  } & (
    | PixelOffset1[]
    | {
        cartesian2?: Cartesian21;
        reference?: Reference7;
        [k: string]: unknown;
      }
  );
/**
 * The pixel offset specified as a two-dimensional Cartesian value `[X, Y]`, in viewport coordinates in pixels, where X is pixels to the right and Y is pixels up.
 */
export type Cartesian21 = unknown[];
/**
 * The pixel offset specified as a reference to another property.
 */
export type Reference7 = string;
/**
 * A pixel offset in viewport coordinates. A pixel offset is the number of pixels up and to the right to place an element relative to an origin.
 */
export type PixelOffset1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian21;
    reference?: Reference7;
    [k: string]: unknown;
  } & (
    | PixelOffset1[]
    | {
        cartesian2?: Cartesian21;
        reference?: Reference7;
        [k: string]: unknown;
      }
  );
/**
 * The eye offset of the label, which is the offset in eye coordinates at which to place the label relative to the `position` property. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis points up, and the Z-axis points into the screen.
 */
export type EyeOffset = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | EyeOffset1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The eye offset specified as a three-dimensional Cartesian value `[X, Y, Z]`, in eye coordinates in meters. If the array has three elements, the eye offset is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, Time, X, Y, Z, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
 */
export type Cartesian3 = unknown[];
/**
 * The eye offset specified as a reference to another property.
 */
export type Reference8 = string;
/**
 * An offset in eye coordinates which can optionally vary over time. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis poitns up, and the Z-axis points into the screen.
 */
export type EyeOffset1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | EyeOffset1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The horizontal origin of the label. It controls whether the label is left-, center-, or right-aligned with the `position`.
 */
export type HorizontalOrigin = DeletableProperty &
  HorizontalOriginValueProperty &
  ReferenceValueProperty & {
    horizontalOrigin?: HorizontalOrigin1;
    reference?: Reference9;
    [k: string]: unknown;
  } & (
    | HorizontalOrigin2[]
    | {
        horizontalOrigin?: HorizontalOrigin1;
        reference?: Reference9;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The horizontal origin.
 */
export type HorizontalOrigin1 = ("LEFT" | "CENTER" | "RIGHT") & string;
/**
 * The horizontal origin specified as a reference to another property.
 */
export type Reference9 = string;
/**
 * The horizontal origin of an element, which can optionally vary over time. It controls whether the element is left-, center-, or right-aligned with the `position`.
 */
export type HorizontalOrigin2 = DeletableProperty &
  HorizontalOriginValueProperty &
  ReferenceValueProperty & {
    horizontalOrigin?: HorizontalOrigin1;
    reference?: Reference9;
    [k: string]: unknown;
  } & (
    | HorizontalOrigin2[]
    | {
        horizontalOrigin?: HorizontalOrigin1;
        reference?: Reference9;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The vertical origin of the label. It controls whether the label image is bottom-, center-, or top-aligned with the `position`.
 */
export type VerticalOrigin = DeletableProperty &
  VerticalOriginValueProperty &
  ReferenceValueProperty & {
    verticalOrigin?: VerticalOrigin1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | VerticalOrigin2[]
    | {
        verticalOrigin?: VerticalOrigin1;
        reference?: Reference10;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The vertical origin.
 */
export type VerticalOrigin1 = ("BASELINE" | "BOTTOM" | "CENTER" | "TOP") & string;
/**
 * The vertical origin specified as a reference to another property.
 */
export type Reference10 = string;
/**
 * The vertical origin of an element, which can optionally vary over time. It controls whether the element is bottom-, center-, or top-aligned with the `position`.
 */
export type VerticalOrigin2 = DeletableProperty &
  VerticalOriginValueProperty &
  ReferenceValueProperty & {
    verticalOrigin?: VerticalOrigin1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | VerticalOrigin2[]
    | {
        verticalOrigin?: VerticalOrigin1;
        reference?: Reference10;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference of the label, which indicates if the position is relative to terrain or not.
 */
export type HeightReference = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference11;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference.
 */
export type HeightReference1 = ("NONE" | "CLAMP_TO_GROUND" | "RELATIVE_TO_GROUND") & string;
/**
 * The height reference specified as a reference to another property.
 */
export type Reference11 = string;
/**
 * The height reference of an object, which indicates if the object's position is relative to terrain or not.
 */
export type HeightReference2 = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference11;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The fill color of the label.
 */
export type Color2 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The outline color of the label.
 */
export type Color3 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The outline width of the label.
 */
export type Double3 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | number
  );
/**
 * How the label's translucency should change based on the label's distance from the camera. This scalar value should range from 0 to 1.
 */
export type NearFarScalar = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`, with distances in eye coordinates in meters.
 */
export type NearFarScalar1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference12 = string;
/**
 * A numeric value which will be linearly interpolated between two values based on an object's distance from the camera, in eye coordinates. The computed value will interpolate between the near value and the far value while the camera distance falls between the near distance and the far distance, and will be clamped to the near or far value while the distance is less than the near distance or greater than the far distance, respectively.
 */
export type NearFarScalar2 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * How the label's pixel offset should change based on the label's distance from the camera. This scalar value will be multiplied by `pixelOffset`.
 */
export type NearFarScalar3 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * How the label's scale should change based on the label's distance from the camera. This scalar value will be multiplied by `scale`.
 */
export type NearFarScalar4 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * The display condition specifying the distance from the camera at which this label will be displayed.
 */
export type DistanceDisplayCondition = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference13;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference13;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as two values `[NearDistance, FarDistance]`, with distances in meters.
 */
export type DistanceDisplayCondition1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference13 = string;
/**
 * Indicates the visibility of an object based on the distance to the camera.
 */
export type DistanceDisplayCondition2 = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference13;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference13;
        [k: string]: unknown;
      }
  );
/**
 * The distance from the camera at which to disable the depth test. This can be used to prevent clipping against terrain, for example. When set to zero, the depth test is always applied. When set to Infinity, the depth test is never applied.
 */
export type Double4 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | number
  );

/**
 * A string of text.
 */
export interface Label {
  show?: Boolean;
  text?: String;
  font?: Font;
  style?: LabelStyle;
  scale?: Double;
  showBackground?: Boolean3;
  backgroundColor?: Color;
  backgroundPadding?: BackgroundPadding;
  pixelOffset?: PixelOffset;
  eyeOffset?: EyeOffset;
  horizontalOrigin?: HorizontalOrigin;
  verticalOrigin?: VerticalOrigin;
  heightReference?: HeightReference;
  fillColor?: Color2;
  outlineColor?: Color3;
  outlineWidth?: Double3;
  translucencyByDistance?: NearFarScalar;
  pixelOffsetScaleByDistance?: NearFarScalar3;
  scaleByDistance?: NearFarScalar4;
  distanceDisplayCondition?: DistanceDisplayCondition;
  disableDepthTestDistance?: Double4;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be deleted.
 */
export interface DeletableProperty {
  /**
   * Whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
   */
  delete?: boolean;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a boolean.
 */
export interface BooleanValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a reference to another property.
 */
export interface ReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a string.
 */
export interface StringValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a CSS font.
 */
export interface FontValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a label style.
 */
export interface LabelStyleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
 */
export interface InterpolatableProperty {
  /**
   * The epoch to use for times specified as seconds since an epoch.
   */
  epoch?: string;
  /**
   * The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".
   */
  interpolationAlgorithm?: string;
  /**
   * The degree of interpolation to use when interpolating.
   */
  interpolationDegree?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  forwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  forwardExtrapolationDuration?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  backwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  backwardExtrapolationDuration?: number;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a floating-point number.
 */
export interface DoubleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255.
 */
export interface RgbaValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0.
 */
export interface RgbafValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a two-dimensional Cartesian.
 */
export interface Cartesian2ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a three-dimensional Cartesian.
 */
export interface Cartesian3ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a horizontal origin.
 */
export interface HorizontalOriginValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a vertical origin.
 */
export interface VerticalOriginValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a height reference.
 */
export interface HeightReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a near-far scalar value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`.
 */
export interface NearFarScalarValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as two values `[NearDistance, FarDistance]`.
 */
export interface DistanceDisplayConditionValueProperty {
  [k: string]: unknown;
}
