/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Whether or not the billboard is shown.
 */
export type Boolean = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The boolean value.
 */
export type Boolean1 = boolean;
/**
 * The boolean specified as a reference to another property.
 */
export type Reference = string;
/**
 * A boolean value.
 */
export type Boolean2 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The URI of the image displayed on the billboard. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). The URI may also be a <a href="https://developer.mozilla.org/en/data_URIs">data URI</a>.
 */
export type Uri = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The URI value.
 */
export type Uri1 = string;
/**
 * The URI specified as a reference to another property.
 */
export type Reference1 = string;
/**
 * A URI value. The URI can optionally vary with time.
 */
export type Uri2 = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The scale of the billboard. The scale is multiplied with the pixel size of the billboard's `image`. For example, if the scale is 2.0, the billboard will be rendered with twice the number of pixels, in each direction, of the `image`.
 */
export type Double = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The number.
 */
export type Double1 = number | unknown[];
/**
 * The number specified as a reference to another property.
 */
export type Reference2 = string;
/**
 * A floating-point number.
 */
export type Double2 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The offset, in viewport pixels, of the billboard origin from the `position`. A pixel offset is the number of pixels up and to the right to place the billboard, relative to the `position`.
 */
export type PixelOffset = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian2;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | PixelOffset1[]
    | {
        cartesian2?: Cartesian2;
        reference?: Reference3;
        [k: string]: unknown;
      }
  );
/**
 * The pixel offset specified as a two-dimensional Cartesian value `[X, Y]`, in viewport coordinates in pixels, where X is pixels to the right and Y is pixels up.
 */
export type Cartesian2 = unknown[];
/**
 * The pixel offset specified as a reference to another property.
 */
export type Reference3 = string;
/**
 * A pixel offset in viewport coordinates. A pixel offset is the number of pixels up and to the right to place an element relative to an origin.
 */
export type PixelOffset1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian2ValueProperty &
  ReferenceValueProperty & {
    cartesian2?: Cartesian2;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | PixelOffset1[]
    | {
        cartesian2?: Cartesian2;
        reference?: Reference3;
        [k: string]: unknown;
      }
  );
/**
 * The eye offset of the billboard, which is the offset in eye coordinates at which to place the billboard relative to the `position` property. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis points up, and the Z-axis points into the screen.
 */
export type EyeOffset = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | EyeOffset1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference4;
        [k: string]: unknown;
      }
  );
/**
 * The eye offset specified as a three-dimensional Cartesian value `[X, Y, Z]`, in eye coordinates in meters. If the array has three elements, the eye offset is constant. If it has four or more elements, they are time-tagged samples arranged as `[Time, X, Y, Z, Time, X, Y, Z, ...]`, where Time is an ISO 8601 date and time string or seconds since epoch.
 */
export type Cartesian3 = unknown[];
/**
 * The eye offset specified as a reference to another property.
 */
export type Reference4 = string;
/**
 * An offset in eye coordinates which can optionally vary over time. Eye coordinates are a left-handed coordinate system where the X-axis points toward the viewer's right, the Y-axis poitns up, and the Z-axis points into the screen.
 */
export type EyeOffset1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | EyeOffset1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference4;
        [k: string]: unknown;
      }
  );
/**
 * The horizontal origin of the billboard, which determines whether the billboard image is left-, center-, or right-aligned with the `position`.
 */
export type HorizontalOrigin = DeletableProperty &
  HorizontalOriginValueProperty &
  ReferenceValueProperty & {
    horizontalOrigin?: HorizontalOrigin1;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | HorizontalOrigin2[]
    | {
        horizontalOrigin?: HorizontalOrigin1;
        reference?: Reference5;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The horizontal origin.
 */
export type HorizontalOrigin1 = ("LEFT" | "CENTER" | "RIGHT") & string;
/**
 * The horizontal origin specified as a reference to another property.
 */
export type Reference5 = string;
/**
 * The horizontal origin of an element, which can optionally vary over time. It controls whether the element is left-, center-, or right-aligned with the `position`.
 */
export type HorizontalOrigin2 = DeletableProperty &
  HorizontalOriginValueProperty &
  ReferenceValueProperty & {
    horizontalOrigin?: HorizontalOrigin1;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | HorizontalOrigin2[]
    | {
        horizontalOrigin?: HorizontalOrigin1;
        reference?: Reference5;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The vertical origin of the billboard, which determines whether the billboard image is bottom-, center-, or top-aligned with the `position`.
 */
export type VerticalOrigin = DeletableProperty &
  VerticalOriginValueProperty &
  ReferenceValueProperty & {
    verticalOrigin?: VerticalOrigin1;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | VerticalOrigin2[]
    | {
        verticalOrigin?: VerticalOrigin1;
        reference?: Reference6;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The vertical origin.
 */
export type VerticalOrigin1 = ("BASELINE" | "BOTTOM" | "CENTER" | "TOP") & string;
/**
 * The vertical origin specified as a reference to another property.
 */
export type Reference6 = string;
/**
 * The vertical origin of an element, which can optionally vary over time. It controls whether the element is bottom-, center-, or top-aligned with the `position`.
 */
export type VerticalOrigin2 = DeletableProperty &
  VerticalOriginValueProperty &
  ReferenceValueProperty & {
    verticalOrigin?: VerticalOrigin1;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | VerticalOrigin2[]
    | {
        verticalOrigin?: VerticalOrigin1;
        reference?: Reference6;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference of the billboard, which indicates if the position is relative to terrain or not.
 */
export type HeightReference = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference7;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference7;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference.
 */
export type HeightReference1 = ("NONE" | "CLAMP_TO_GROUND" | "RELATIVE_TO_GROUND") & string;
/**
 * The height reference specified as a reference to another property.
 */
export type Reference7 = string;
/**
 * The height reference of an object, which indicates if the object's position is relative to terrain or not.
 */
export type HeightReference2 = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference7;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference7;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The color of the billboard. This color value is multiplied with the values of the billboard's `image` to produce the final color.
 */
export type Color = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.
 */
export type Rgba = unknown[];
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.
 */
export type Rgbaf = unknown[];
/**
 * The color specified as a reference to another property.
 */
export type Reference8 = string;
/**
 * A color. The color can optionally vary over time.
 */
export type Color1 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The rotation of the billboard, in radians, counter-clockwise from the alignedAxis.
 */
export type Double3 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The aligned axis is the unit vector, in world coordinates, that the billboard up vector points towards. The default is the zero vector, which means the billboard is aligned to the screen up vector.
 */
export type AlignedAxis = InterpolatableProperty &
  DeletableProperty &
  UnitCartesian3ValueProperty &
  UnitSphericalValueProperty &
  ReferenceValueProperty &
  VelocityReferenceValueProperty & {
    unitCartesian?: UnitCartesian3;
    unitSpherical?: UnitSpherical;
    reference?: Reference9;
    velocityReference?: VelocityReference;
    [k: string]: unknown;
  } & (
    | AlignedAxis1[]
    | {
        unitCartesian?: UnitCartesian3;
        unitSpherical?: UnitSpherical;
        reference?: Reference9;
        velocityReference?: VelocityReference;
        [k: string]: unknown;
      }
  );
/**
 * The axis specified as a three-dimensional unit magnitude Cartesian value `[X, Y, Z]`, in world coordinates.
 */
export type UnitCartesian3 = unknown[];
/**
 * The axis specified as a unit spherical value `[Clock, Cone]`, in radians. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
 */
export type UnitSpherical = unknown[];
/**
 * The axis specified as a reference to another property.
 */
export type Reference9 = string;
/**
 * The axis specified as the normalized velocity vector of a position property. The reference must be to a `position` property.
 */
export type VelocityReference = string;
/**
 * An aligned axis represented by a unit vector which can optionally vary over time.
 */
export type AlignedAxis1 = InterpolatableProperty &
  DeletableProperty &
  UnitCartesian3ValueProperty &
  UnitSphericalValueProperty &
  ReferenceValueProperty &
  VelocityReferenceValueProperty & {
    unitCartesian?: UnitCartesian3;
    unitSpherical?: UnitSpherical;
    reference?: Reference9;
    velocityReference?: VelocityReference;
    [k: string]: unknown;
  } & (
    | AlignedAxis1[]
    | {
        unitCartesian?: UnitCartesian3;
        unitSpherical?: UnitSpherical;
        reference?: Reference9;
        velocityReference?: VelocityReference;
        [k: string]: unknown;
      }
  );
/**
 * Whether this billboard's size (`width` and `height`) should be measured in meters, otherwise size is measured in pixels.
 */
export type Boolean3 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The width of the billboard, in pixels (or meters, if `sizeInMeters` is true). By default, the native width of the image is used.
 */
export type Double4 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The height of the billboard, in pixels (or meters, if `sizeInMeters` is true). By default, the native height of the image is used.
 */
export type Double5 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * How the billboard's scale should change based on the billboard's distance from the camera. This scalar value will be multiplied by `scale`.
 */
export type NearFarScalar = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`, with distances in eye coordinates in meters.
 */
export type NearFarScalar1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference10 = string;
/**
 * A numeric value which will be linearly interpolated between two values based on an object's distance from the camera, in eye coordinates. The computed value will interpolate between the near value and the far value while the camera distance falls between the near distance and the far distance, and will be clamped to the near or far value while the distance is less than the near distance or greater than the far distance, respectively.
 */
export type NearFarScalar2 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * How the billboard's translucency should change based on the billboard's distance from the camera. This scalar value should range from 0 to 1.
 */
export type NearFarScalar3 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * How the billboard's pixel offset should change based on the billboard's distance from the camera. This scalar value will be multiplied by `pixelOffset`.
 */
export type NearFarScalar4 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * A sub-region of the image which will be used for the billboard, rather than the entire image, measured in pixels from the bottom-left.
 */
export type BoundingRectangle = InterpolatableProperty &
  DeletableProperty &
  BoundingRectangleValueProperty &
  ReferenceValueProperty & {
    boundingRectangle?: BoundingRectangle1;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | BoundingRectangle2[]
    | {
        boundingRectangle?: BoundingRectangle1;
        reference?: Reference11;
        [k: string]: unknown;
      }
  );
/**
 * The bounding rectangle specified as `[X, Y, Width, Height]`.
 */
export type BoundingRectangle1 = unknown[];
/**
 * The bounding rectangle specified as a reference to another property.
 */
export type Reference11 = string;
/**
 * A bounding rectangle specified by a corner, width and height.
 */
export type BoundingRectangle2 = InterpolatableProperty &
  DeletableProperty &
  BoundingRectangleValueProperty &
  ReferenceValueProperty & {
    boundingRectangle?: BoundingRectangle1;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | BoundingRectangle2[]
    | {
        boundingRectangle?: BoundingRectangle1;
        reference?: Reference11;
        [k: string]: unknown;
      }
  );
/**
 * The display condition specifying the distance from the camera at which this billboard will be displayed.
 */
export type DistanceDisplayCondition = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as two values `[NearDistance, FarDistance]`, with distances in meters.
 */
export type DistanceDisplayCondition1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference12 = string;
/**
 * Indicates the visibility of an object based on the distance to the camera.
 */
export type DistanceDisplayCondition2 = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference12;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference12;
        [k: string]: unknown;
      }
  );
/**
 * The distance from the camera at which to disable the depth test. This can be used to prevent clipping against terrain, for example. When set to zero, the depth test is always applied. When set to Infinity, the depth test is never applied.
 */
export type Double6 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );

/**
 * A billboard, or viewport-aligned image. The billboard is positioned in the scene by the `position` property. A billboard is sometimes called a marker.
 */
export interface Billboard {
  show?: Boolean;
  image?: Uri;
  scale?: Double;
  pixelOffset?: PixelOffset;
  eyeOffset?: EyeOffset;
  horizontalOrigin?: HorizontalOrigin;
  verticalOrigin?: VerticalOrigin;
  heightReference?: HeightReference;
  color?: Color;
  rotation?: Double3;
  alignedAxis?: AlignedAxis;
  sizeInMeters?: Boolean3;
  width?: Double4;
  height?: Double5;
  scaleByDistance?: NearFarScalar;
  translucencyByDistance?: NearFarScalar3;
  pixelOffsetScaleByDistance?: NearFarScalar4;
  imageSubRegion?: BoundingRectangle;
  distanceDisplayCondition?: DistanceDisplayCondition;
  disableDepthTestDistance?: Double6;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be deleted.
 */
export interface DeletableProperty {
  /**
   * Whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
   */
  delete?: boolean;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a boolean.
 */
export interface BooleanValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a reference to another property.
 */
export interface ReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a URI.
 */
export interface UriValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
 */
export interface InterpolatableProperty {
  /**
   * The epoch to use for times specified as seconds since an epoch.
   */
  epoch?: string;
  /**
   * The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".
   */
  interpolationAlgorithm?: string;
  /**
   * The degree of interpolation to use when interpolating.
   */
  interpolationDegree?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  forwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  forwardExtrapolationDuration?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  backwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  backwardExtrapolationDuration?: number;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a floating-point number.
 */
export interface DoubleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a two-dimensional Cartesian.
 */
export interface Cartesian2ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a three-dimensional Cartesian.
 */
export interface Cartesian3ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a horizontal origin.
 */
export interface HorizontalOriginValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a vertical origin.
 */
export interface VerticalOriginValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a height reference.
 */
export interface HeightReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255.
 */
export interface RgbaValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0.
 */
export interface RgbafValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a three-dimensional unit magnitude Cartesian.
 */
export interface UnitCartesian3ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a unit spherical.
 */
export interface UnitSphericalValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a normalized velocity vector of a position property. The reference must be to a `position` property.
 */
export interface VelocityReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a near-far scalar value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`.
 */
export interface NearFarScalarValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a bounding rectangle.
 */
export interface BoundingRectangleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as two values `[NearDistance, FarDistance]`.
 */
export interface DistanceDisplayConditionValueProperty {
  [k: string]: unknown;
}
