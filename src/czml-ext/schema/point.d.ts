/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Whether or not the point is shown.
 */
export type Boolean = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The boolean value.
 */
export type Boolean1 = boolean;
/**
 * The boolean specified as a reference to another property.
 */
export type Reference = string;
/**
 * A boolean value.
 */
export type Boolean2 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The size of the point, in pixels.
 */
export type Double = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The number.
 */
export type Double1 = number | unknown[];
/**
 * The number specified as a reference to another property.
 */
export type Reference1 = string;
/**
 * A floating-point number.
 */
export type Double2 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The height reference of the point, which indicates if the position is relative to terrain or not.
 */
export type HeightReference = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference.
 */
export type HeightReference1 = ("NONE" | "CLAMP_TO_GROUND" | "RELATIVE_TO_GROUND") & string;
/**
 * The height reference specified as a reference to another property.
 */
export type Reference2 = string;
/**
 * The height reference of an object, which indicates if the object's position is relative to terrain or not.
 */
export type HeightReference2 = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The color of the point.
 */
export type Color = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference3;
        [k: string]: unknown;
      }
  );
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.
 */
export type Rgba = unknown[];
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.
 */
export type Rgbaf = unknown[];
/**
 * The color specified as a reference to another property.
 */
export type Reference3 = string;
/**
 * A color. The color can optionally vary over time.
 */
export type Color1 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference3;
        [k: string]: unknown;
      }
  );
/**
 * The color of the outline of the point.
 */
export type Color2 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference3;
        [k: string]: unknown;
      }
  );
/**
 * The width of the outline of the point.
 */
export type Double3 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | number
  );
/**
 * How the point's scale should change based on the point's distance from the camera. This scalar value will be multiplied by `pixelSize`.
 */
export type NearFarScalar = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference4;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`, with distances in eye coordinates in meters.
 */
export type NearFarScalar1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference4 = string;
/**
 * A numeric value which will be linearly interpolated between two values based on an object's distance from the camera, in eye coordinates. The computed value will interpolate between the near value and the far value while the camera distance falls between the near distance and the far distance, and will be clamped to the near or far value while the distance is less than the near distance or greater than the far distance, respectively.
 */
export type NearFarScalar2 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference4;
        [k: string]: unknown;
      }
  );
/**
 * How the point's translucency should change based on the point's distance from the camera. This scalar value should range from 0 to 1.
 */
export type NearFarScalar3 = InterpolatableProperty &
  DeletableProperty &
  NearFarScalarValueProperty &
  ReferenceValueProperty & {
    nearFarScalar?: NearFarScalar1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | NearFarScalar2[]
    | {
        nearFarScalar?: NearFarScalar1;
        reference?: Reference4;
        [k: string]: unknown;
      }
  );
/**
 * The display condition specifying the distance from the camera at which this point will be displayed.
 */
export type DistanceDisplayCondition = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as two values `[NearDistance, FarDistance]`, with distances in meters.
 */
export type DistanceDisplayCondition1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference5 = string;
/**
 * Indicates the visibility of an object based on the distance to the camera.
 */
export type DistanceDisplayCondition2 = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition2[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The distance from the camera at which to disable the depth test. This can be used to prevent clipping against terrain, for example. When set to zero, the depth test is always applied. When set to Infinity, the depth test is never applied.
 */
export type Double4 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | number
  );

/**
 * A point, or viewport-aligned circle.
 */
export interface Point {
  show?: Boolean;
  pixelSize?: Double;
  heightReference?: HeightReference;
  color?: Color;
  outlineColor?: Color2;
  outlineWidth?: Double3;
  scaleByDistance?: NearFarScalar;
  translucencyByDistance?: NearFarScalar3;
  distanceDisplayCondition?: DistanceDisplayCondition;
  disableDepthTestDistance?: Double4;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be deleted.
 */
export interface DeletableProperty {
  /**
   * Whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
   */
  delete?: boolean;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a boolean.
 */
export interface BooleanValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a reference to another property.
 */
export interface ReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
 */
export interface InterpolatableProperty {
  /**
   * The epoch to use for times specified as seconds since an epoch.
   */
  epoch?: string;
  /**
   * The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".
   */
  interpolationAlgorithm?: string;
  /**
   * The degree of interpolation to use when interpolating.
   */
  interpolationDegree?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  forwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  forwardExtrapolationDuration?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  backwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  backwardExtrapolationDuration?: number;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a floating-point number.
 */
export interface DoubleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a height reference.
 */
export interface HeightReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255.
 */
export interface RgbaValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0.
 */
export interface RgbafValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a near-far scalar value specified as four values `[NearDistance, NearValue, FarDistance, FarValue]`.
 */
export interface NearFarScalarValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as two values `[NearDistance, FarDistance]`.
 */
export interface DistanceDisplayConditionValueProperty {
  [k: string]: unknown;
}
