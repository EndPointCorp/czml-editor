/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Whether or not the model is shown.
 */
export type Boolean = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * The boolean value.
 */
export type Boolean1 = boolean;
/**
 * The boolean specified as a reference to another property.
 */
export type Reference = string;
/**
 * A boolean value.
 */
export type Boolean2 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * A URI value. The URI can optionally vary with time.
 */
export type Uri = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The URI value.
 */
export type Uri1 = string;
/**
 * The URI specified as a reference to another property.
 */
export type Reference1 = string;
/**
 * A URI value. The URI can optionally vary with time.
 */
export type Uri2 = DeletableProperty &
  UriValueProperty &
  ReferenceValueProperty & {
    uri?: Uri1;
    reference?: Reference1;
    [k: string]: unknown;
  } & (
    | Uri2[]
    | {
        uri?: Uri1;
        reference?: Reference1;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The scale of the model.
 */
export type Double = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The number.
 */
export type Double1 = number | unknown[];
/**
 * The number specified as a reference to another property.
 */
export type Reference2 = string;
/**
 * A floating-point number.
 */
export type Double2 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The approximate minimum pixel size of the model regardless of zoom.
 */
export type Double3 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The maximum scale size of the model. This is used as an upper limit for `minimumPixelSize`.
 */
export type Double4 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * Whether or not the model can be rendered before all textures have loaded.
 */
export type Boolean3 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * Whether or not to run all animations defined in the glTF model.
 */
export type Boolean4 = DeletableProperty &
  BooleanValueProperty &
  ReferenceValueProperty & {
    boolean?: Boolean1;
    reference?: Reference;
    [k: string]: unknown;
  } & (
    | Boolean2[]
    | {
        boolean?: Boolean1;
        reference?: Reference;
        [k: string]: unknown;
      }
    | boolean
  );
/**
 * Whether or not the model casts or receives shadows.
 */
export type ShadowMode = DeletableProperty &
  ShadowModeValueProperty &
  ReferenceValueProperty & {
    shadowMode?: ShadowMode1;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | ShadowMode2[]
    | {
        shadowMode?: ShadowMode1;
        reference?: Reference3;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The shadow mode.
 */
export type ShadowMode1 = ("DISABLED" | "ENABLED" | "CAST_ONLY" | "RECEIVE_ONLY") & string;
/**
 * The shadow mode specified as a reference to another property.
 */
export type Reference3 = string;
/**
 * Whether or not an object casts or receives shadows from each light source when shadows are enabled.
 */
export type ShadowMode2 = DeletableProperty &
  ShadowModeValueProperty &
  ReferenceValueProperty & {
    shadowMode?: ShadowMode1;
    reference?: Reference3;
    [k: string]: unknown;
  } & (
    | ShadowMode2[]
    | {
        shadowMode?: ShadowMode1;
        reference?: Reference3;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference of the model, which indicates if the position is relative to terrain or not.
 */
export type HeightReference = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The height reference.
 */
export type HeightReference1 = ("NONE" | "CLAMP_TO_GROUND" | "RELATIVE_TO_GROUND") & string;
/**
 * The height reference specified as a reference to another property.
 */
export type Reference4 = string;
/**
 * The height reference of an object, which indicates if the object's position is relative to terrain or not.
 */
export type HeightReference2 = DeletableProperty &
  HeightReferenceValueProperty &
  ReferenceValueProperty & {
    heightReference?: HeightReference1;
    reference?: Reference4;
    [k: string]: unknown;
  } & (
    | HeightReference2[]
    | {
        heightReference?: HeightReference1;
        reference?: Reference4;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The color of the silhouette drawn around the model.
 */
export type Color = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is an integer in the range 0-255.
 */
export type Rgba = unknown[];
/**
 * The color specified as an array of color components `[Red, Green, Blue, Alpha]` where each component is a double in the range 0.0-1.0.
 */
export type Rgbaf = unknown[];
/**
 * The color specified as a reference to another property.
 */
export type Reference5 = string;
/**
 * A color. The color can optionally vary over time.
 */
export type Color1 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The size, in pixels, of the silhouette drawn around the model.
 */
export type Double5 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The color to blend with the model's rendered color.
 */
export type Color2 = InterpolatableProperty &
  DeletableProperty &
  RgbaValueProperty &
  RgbafValueProperty &
  ReferenceValueProperty & {
    rgba?: Rgba;
    rgbaf?: Rgbaf;
    reference?: Reference5;
    [k: string]: unknown;
  } & (
    | Color1[]
    | {
        rgba?: Rgba;
        rgbaf?: Rgbaf;
        reference?: Reference5;
        [k: string]: unknown;
      }
  );
/**
 * The mode to use for blending between `color` and the model's color.
 */
export type ColorBlendMode = DeletableProperty &
  ColorBlendModeValueProperty &
  ReferenceValueProperty & {
    colorBlendMode?: ColorBlendMode1;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | ColorBlendMode2[]
    | {
        colorBlendMode?: ColorBlendMode1;
        reference?: Reference6;
        [k: string]: unknown;
      }
    | string
  );
/**
 * The color blend mode.
 */
export type ColorBlendMode1 = ("HIGHLIGHT" | "REPLACE" | "MIX") & string;
/**
 * The color blend mode specified as a reference to another property.
 */
export type Reference6 = string;
/**
 * The mode of blending between a target color and an entity's source color.
 */
export type ColorBlendMode2 = DeletableProperty &
  ColorBlendModeValueProperty &
  ReferenceValueProperty & {
    colorBlendMode?: ColorBlendMode1;
    reference?: Reference6;
    [k: string]: unknown;
  } & (
    | ColorBlendMode2[]
    | {
        colorBlendMode?: ColorBlendMode1;
        reference?: Reference6;
        [k: string]: unknown;
      }
    | string
  );
/**
 * A floating-point number.
 */
export type Double6 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double1;
    reference?: Reference2;
    [k: string]: unknown;
  } & (
    | Double2[]
    | {
        number?: Double1;
        reference?: Reference2;
        [k: string]: unknown;
      }
    | number
  );
/**
 * Indicates the visibility of an object based on the distance to the camera.
 */
export type DistanceDisplayCondition = InterpolatableProperty &
  DeletableProperty &
  DistanceDisplayConditionValueProperty &
  ReferenceValueProperty & {
    distanceDisplayCondition?: DistanceDisplayCondition1;
    reference?: Reference7;
    [k: string]: unknown;
  } & (
    | DistanceDisplayCondition[]
    | {
        distanceDisplayCondition?: DistanceDisplayCondition1;
        reference?: Reference7;
        [k: string]: unknown;
      }
  );
/**
 * The value specified as two values `[NearDistance, FarDistance]`, with distances in meters.
 */
export type DistanceDisplayCondition1 = unknown[];
/**
 * The value specified as a reference to another property.
 */
export type Reference7 = string;
/**
 * Transformations to apply to a particular node in a 3D model.
 */
export type NodeTransformation = {
  translation?: Translation;
  rotation?: Rotation;
  scale?: Scale;
  [k: string]: unknown;
} & (
  | NodeTransformation1[]
  | {
      translation?: Translation;
      rotation?: Rotation;
      scale?: Scale;
      [k: string]: unknown;
    }
);
/**
 * The translation to apply to the model node.
 */
export type Translation = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | Translation1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The translation specified as a three-dimensional Cartesian value `[X, Y, Z]`, in meters.
 */
export type Cartesian3 = unknown[];
/**
 * The translation specified as a reference to another property.
 */
export type Reference8 = string;
/**
 * A translational offset which can optionally vary over time.
 */
export type Translation1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian3;
    reference?: Reference8;
    [k: string]: unknown;
  } & (
    | Translation1[]
    | {
        cartesian?: Cartesian3;
        reference?: Reference8;
        [k: string]: unknown;
      }
  );
/**
 * The rotation to apply to the model node.
 */
export type Rotation = InterpolatableProperty &
  DeletableProperty &
  UnitQuaternionValueProperty &
  ReferenceValueProperty & {
    unitQuaternion?: UnitQuaternion;
    reference?: Reference9;
    [k: string]: unknown;
  } & (
    | Rotation1[]
    | {
        unitQuaternion?: UnitQuaternion;
        reference?: Reference9;
        [k: string]: unknown;
      }
  );
/**
 * The rotation specified as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.
 */
export type UnitQuaternion = unknown[];
/**
 * The rotation specified as a reference to another property.
 */
export type Reference9 = string;
/**
 * Defines a rotation that transforms a vector expressed in one axes and transforms it to another.
 */
export type Rotation1 = InterpolatableProperty &
  DeletableProperty &
  UnitQuaternionValueProperty &
  ReferenceValueProperty & {
    unitQuaternion?: UnitQuaternion;
    reference?: Reference9;
    [k: string]: unknown;
  } & (
    | Rotation1[]
    | {
        unitQuaternion?: UnitQuaternion;
        reference?: Reference9;
        [k: string]: unknown;
      }
  );
/**
 * The scaling to apply to the model node.
 */
export type Scale = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian31;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | Scale1[]
    | {
        cartesian?: Cartesian31;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * The scale specified as a three-dimensional Cartesian value `[X, Y, Z]`.
 */
export type Cartesian31 = unknown[];
/**
 * The scale specified as a reference to another property.
 */
export type Reference10 = string;
/**
 * A scaling factor which can optionally vary over time.
 */
export type Scale1 = InterpolatableProperty &
  DeletableProperty &
  Cartesian3ValueProperty &
  ReferenceValueProperty & {
    cartesian?: Cartesian31;
    reference?: Reference10;
    [k: string]: unknown;
  } & (
    | Scale1[]
    | {
        cartesian?: Cartesian31;
        reference?: Reference10;
        [k: string]: unknown;
      }
  );
/**
 * A set of transformations to apply to a particular node in a 3D model.
 */
export type NodeTransformation1 = {
  translation?: Translation;
  rotation?: Rotation;
  scale?: Scale;
  [k: string]: unknown;
} & (
  | NodeTransformation1[]
  | {
      translation?: Translation;
      rotation?: Rotation;
      scale?: Scale;
      [k: string]: unknown;
    }
);
/**
 * Articulation values to apply to a 3D model.
 */
export type Articulation = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double7;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | Articulation1[]
    | {
        number?: Double7;
        reference?: Reference11;
        [k: string]: unknown;
      }
    | number
  );
/**
 * The articulation value.
 */
export type Double7 = number | unknown[];
/**
 * The articulation value specified as a reference to another property.
 */
export type Reference11 = string;
/**
 * An articulation value.
 */
export type Articulation1 = InterpolatableProperty &
  DeletableProperty &
  DoubleValueProperty &
  ReferenceValueProperty & {
    number?: Double7;
    reference?: Reference11;
    [k: string]: unknown;
  } & (
    | Articulation1[]
    | {
        number?: Double7;
        reference?: Reference11;
        [k: string]: unknown;
      }
    | number
  );

/**
 * A 3D model.
 */
export interface Model {
  show?: Boolean;
  gltf?: Uri;
  scale?: Double;
  minimumPixelSize?: Double3;
  maximumScale?: Double4;
  incrementallyLoadTextures?: Boolean3;
  runAnimations?: Boolean4;
  shadows?: ShadowMode;
  heightReference?: HeightReference;
  silhouetteColor?: Color;
  silhouetteSize?: Double5;
  color?: Color2;
  colorBlendMode?: ColorBlendMode;
  colorBlendAmount?: Double6;
  distanceDisplayCondition?: DistanceDisplayCondition;
  nodeTransformations?: NodeTransformations;
  articulations?: Articulations;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be deleted.
 */
export interface DeletableProperty {
  /**
   * Whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
   */
  delete?: boolean;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a boolean.
 */
export interface BooleanValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a reference to another property.
 */
export interface ReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a URI.
 */
export interface UriValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be determined by interpolating over provided time-tagged samples.
 */
export interface InterpolatableProperty {
  /**
   * The epoch to use for times specified as seconds since an epoch.
   */
  epoch?: string;
  /**
   * The interpolation algorithm to use when interpolating. Valid values are "LINEAR", "LAGRANGE", and "HERMITE".
   */
  interpolationAlgorithm?: string;
  /**
   * The degree of interpolation to use when interpolating.
   */
  interpolationDegree?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time after any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  forwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate forward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  forwardExtrapolationDuration?: number;
  /**
   * The type of extrapolation to perform when a value is requested at a time before any available samples. Valid values are "NONE", "HOLD", and "EXTRAPOLATE".
   */
  backwardExtrapolationType?: string;
  /**
   * The amount of time to extrapolate backward before the property becomes undefined. A value of 0 will extrapolate forever.
   */
  backwardExtrapolationDuration?: number;
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a floating-point number.
 */
export interface DoubleValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a shadow mode.
 */
export interface ShadowModeValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a height reference.
 */
export interface HeightReferenceValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0-255.
 */
export interface RgbaValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as an array of color components `[Red, Green, Blue, Alpha]` where each component is in the range 0.0-1.0.
 */
export interface RgbafValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a type of arc.
 */
export interface ColorBlendModeValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as two values `[NearDistance, FarDistance]`.
 */
export interface DistanceDisplayConditionValueProperty {
  [k: string]: unknown;
}
/**
 * A mapping of node names to node transformations.
 */
export interface NodeTransformations {
  [k: string]: NodeTransformation;
}
/**
 * The base schema for a property whose value may be written as a three-dimensional Cartesian.
 */
export interface Cartesian3ValueProperty {
  [k: string]: unknown;
}
/**
 * The base schema for a property whose value may be written as a 4-dimensional unit magnitude quaternion, specified as `[X, Y, Z, W]`.
 */
export interface UnitQuaternionValueProperty {
  [k: string]: unknown;
}
/**
 * A mapping of keys to articulation values, where the keys are the name of the articulation, a single space, and the name of the stage.
 */
export interface Articulations {
  [k: string]: Articulation;
}
